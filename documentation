*********************************************************************************
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
---------------------------------------------------------------------------------
----------------------------D O C U M E N T A T I O N----------------------------
---------------------------------------------------------------------------------
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*********************************************************************************

Configuration:
	config/__autoload__.php
	
	this file loaded only libraries and configuration files. On line number 8 of this file, just add the library name
	in order to autoload.
	
	$libraries = array('Bootstrap', 'Controller', 'Admin_controller', 'Model', 'View', 'Database', 'Session', 'Hash');
	
	the above code will automatically loaded Bootstrap, Controller, Admin_controller, Model etc
	
	On line number 20 of this file, do same for loading configuration file.
	
	
	you can load them individually on index.php in the root directory. by default __autoload__.php loaded in the index.php
	
	It is best practice to load essential libraries via __autoload__ n other libraries on particular model, controller
	  
	  
	Load libraries, helpers or config files inside model.
	
	class Process_Model extends Model 
	{
		public function __construct() {
			parent::__construct();
			Load::load('config', 'database'); // load database configuration on index method
		}
		
		public function index() {
			Load::load('helpers', 'Url'); // load Url helpers on that model
		}
		
		public function authentication() {
			Load::load('libs', 'Hash'); // load hash library on authentication method
		}
	}
	
	
	for faster rendering script, load helpers, libraries and configuration on __construet() which are required for every
	method inside the class. Form the above example database configuration required highly, url helper requires only in
	index method. and Hash library for authentication.
	
	
	
	---------------------------------------------------------------------------------
	
	
	config/config.php
	
		define your own HASH_GENERAL_KEY n HASH_PASSWORD_KEY; use random string like -- 
				'dsljfERer#$3F4g0(823wreh~js`dr3e4*3n24342#$3werd3xc'
	
	
	
	---------------------------------------------------------------------------------
	
	
	config/paths.php
		
		define constant value used in path determination --
			URL, LIBS, CONFIG
			
			define('URL', 'http://www.example.com/');
			
			
	---------------------------------------------------------------------------------
	
	
	config/database.php
		
		database configuration goes here.
	
	
	---------------------------------------------------------------------------------
	
	
	Some basic understanding
		http://www.example.com/index/demo
		
		In this url index is controller and demo is method
		
		class Index extends Controller
		{
			public function __construct(){
				parent::__construct();
			}
			
			public function index() {
				// index functionality
			}
			
			public function demo() {
				// demo functionality
			}
		}
		
	
	
	calling a model --
		
		class Index extends Controller {
			-----------------------------
			---------------------
			
			public function demo() {
				$this->model->dataRendering(); 
			}
		
		}
			
		the above function calls demo method of Index_Model which is a extension of Model -- 
		
		class Index_Model extends Model {
			---------------------------
			------------------
			
			public function dataRendering() {
				// functionality goes here...
			}
		} 
	
	
	
--------------------------------------------------------------------------------------------------------------------
helpers
	-- dataChk.
	
	
	How to instantiate dataChk library
	
	helperClass::methodName(@parameters)
	
	
	method list: 
		-- lengthChk($data, $minLength, $maxLength)
		
		-- digitChk($data)// allows digit and some alphanumeric data;25pfnd returns 25, sdf$55fd returns false, dfsf returns false
															 
		-- digitAllow($data)// allows only digit, return data or false
		
		-- dataAllow($type, $data)// allows alpth an digit; returns false if not; $type = alpha or digit
		
		-- emailChk($data)// allows only valid email; or return false
			
		-- PSI($data)// returns false if data contains Union, UNION or union and ;-- else returns data
		
-------------------------------------------------------
    call lengthChk method -- 
    	DataChk::lengthChk($pass, 6, 12);
    	
    	if data has min length 6 and max length 12 it returns $data; else false
    	
    	Example:  
    		if(isset($_POST['pass']) && $_POST['pass'] !== ''){
    			if(DataChk::lengthChk($_POST['pass], 6, 12) !== false) {
    				$this->_pass = DataChk::length($_POST['pass]);
    			} else {
    				return false;
    				
    				// or some error reporting function
    			}
    		}
    		
    Note: Please read DataChk.php for others method results
    
 *****************************************************************************************************************************
 	-- url
 	
 	
 	Instantiate --
 	
 	same as dataChk
 	
 	method list:
 		-- split($data)// return array
 
 -----------------------------------------------------
 	Example:
 		$url = Url::split($_REQUEST['url'])
 		
 		// if $_REQUEST has value such as demo/delete/8
 		// it will return array like $url[0] = 'demo', $url[1] = 'delete' n $url[2] = 8; 
 	
 	
 	
 	
 	
	
	
	
	
	
	
	
	
	
	
	
	